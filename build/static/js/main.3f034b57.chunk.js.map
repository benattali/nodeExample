{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","services","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"kLAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCPpCK,EAAU,aA2BDC,EAFE,CAAEC,OAvBJ,WASX,OARgBC,IAAMC,IAAIJ,GAQXK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAclBC,OAXZ,SAAAC,GAEb,OADgBN,IAAMO,KAAKV,EAASS,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SASRI,OANpB,SAACC,EAAIH,GAElB,OADgBN,IAAMU,IAAN,UAAab,EAAb,YAAwBY,GAAMH,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UCR5BO,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACK,KAIP,qBAAKlB,UAAU,QAAf,SACGkB,KCJHC,EAAS,WAMX,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,8DAyFOC,EApFH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,MAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAMdC,qBAAU,WACNC,EACC9B,SACAG,MAAK,SAAA4B,GACFT,EAASS,QAEZ,IAEL,IAqBMC,EAAcP,EACdJ,EACAA,EAAMY,QAAO,SAAA1C,GAAI,OAAIA,EAAKG,aAqBhC,OACI,gCACI,uCACA,cAAC,EAAD,CAAcmB,QAASc,IACvB,8BACI,yBAAQ9B,QAAS,kBAAM6B,GAAYD,IAAnC,kBACMA,EAAU,YAAc,WAGlC,6BACKO,EAAYE,KAAI,SAAA3C,GAAI,OACjB,cAAC,EAAD,CAEAA,KAAMA,EACNC,iBAAkB,kBAjCP,SAAAkB,GACvB,IAAMnB,EAAO8B,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,KAAOA,KAChC2B,EAAW,2BAAQ9C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDoC,EACCrB,OAAOC,EAAI2B,GACXlC,MAAK,SAAAmC,GACFhB,EAASD,EAAMa,KAAI,SAAA3C,GAAI,OAAIA,EAAKmB,KAAOA,EAAKnB,EAAO+C,SAEtDC,OAAM,SAAAC,GACHZ,EAAgB,SAAD,OACFrC,EAAKK,QADH,sCAGb6C,YAAW,WACTb,EAAgB,QACf,QAkB2Bc,CAAmBnD,EAAKmB,MAF3CnB,EAAKmB,SAKlB,uBAAMiC,SA7DE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACflD,QAAS2B,EACTwB,MAAM,IAAIC,MAAOC,cACjBvD,UAAWwD,KAAKC,SAAW,GAC3BzC,GAAIW,EAAM+B,OAAS,GAGvBtB,EACCxB,OAAOwC,GACP3C,MAAK,SAAAmC,GACFhB,EAASD,EAAMgC,OAAOf,IAC1Bd,EAAW,QAgDP,UACI,uBAAO8B,MAAO/B,EAASgC,SA7CV,SAACX,GACtBpB,EAAWoB,EAAMY,OAAOF,UA6ChB,wBAAQG,KAAK,SAAb,qBAEJ,cAAC,EAAD,Q,MC7FZC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.3f034b57.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? 'make not important' : 'make important'\r\n\r\n  return (\r\n    <li className='note'>\r\n      {note.content} \r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note\r\n","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    // const nonExisting = {\r\n    //   id: 10000,\r\n    //   content: 'This note is not saved to server',\r\n    //   date: '2019-05-30T17:30:31.098Z',\r\n    //   important: true,\r\n    // }\r\n    // return request.then(response => response.data.concat(nonExisting))\r\n    return request.then(response => response.data)\r\n  }\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n// { getAll, create, update } is equivalent to {getAll: getAll, create: create, update: update}\r\nconst services = { getAll, create, update }\r\n\r\nexport default services\r\n","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Notification\r\n","import React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport noteService from './services/notes'\r\nimport Notification from './components/Notification'\r\n\r\nconst Footer = () => {\r\n    const footerStyle = {\r\n      color: 'green',\r\n      fontStyle: 'italic',\r\n      fontSize: 16\r\n    }\r\n    return (\r\n      <div style={footerStyle}>\r\n        <br />\r\n        <em>Note app, created by Ben</em>\r\n      </div>\r\n    )\r\n  }\r\n\r\nconst App = () => {\r\n    const [notes, setNotes] = useState([])\r\n    const [newNote, setNewNote] = useState('')\r\n    const [showAll, setShowAll] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n    useEffect(() => {\r\n        noteService\r\n        .getAll()\r\n        .then(initialNotes => {\r\n            setNotes(initialNotes)\r\n        })\r\n      }, [])\r\n\r\n    const addNote = (event) => {\r\n        event.preventDefault()\r\n        const noteObject = {\r\n            content: newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() < 0.5,\r\n            id: notes.length + 1\r\n        }\r\n        \r\n        noteService\r\n        .create(noteObject)\r\n        .then(returnedNote => {\r\n            setNotes(notes.concat(returnedNote))\r\n        setNewNote('')\r\n        })\r\n    }\r\n\r\n    const handleNoteChange = (event) => {\r\n        setNewNote(event.target.value)\r\n    }\r\n\r\n    const notesToShow = showAll\r\n        ? notes\r\n        : notes.filter(note => note.important)\r\n\r\n    const toggleImportanceOf = id => {\r\n        const note = notes.find(n => n.id === id)\r\n        const changedNote = { ...note, important: !note.important }\r\n    \r\n        noteService\r\n        .update(id, changedNote)\r\n        .then(returnedNote => {\r\n            setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n        })\r\n        .catch(error => {\r\n            setErrorMessage(\r\n                `Note '${note.content}' was already removed from server`\r\n              )\r\n              setTimeout(() => {\r\n                setErrorMessage(null)\r\n              }, 5000)\r\n          })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Notes</h1>\r\n            <Notification message={errorMessage} />\r\n            <div>\r\n                <button onClick={() => setShowAll(!showAll)}>\r\n                show {showAll ? 'important' : 'all' }\r\n                </button>\r\n            </div>\r\n            <ul>\r\n                {notesToShow.map(note =>\r\n                    <Note\r\n                    key={note.id}\r\n                    note={note}\r\n                    toggleImportance={() => toggleImportanceOf(note.id)} />\r\n                )}\r\n            </ul>\r\n            <form onSubmit={addNote}>\r\n                <input value={newNote} onChange={handleNoteChange} />\r\n                <button type=\"submit\">save</button>\r\n            </form>  \r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}